@typeparam T where T : class, new()
@inherits TreeViewBase<T>

<div class="container container-body float-start">
	<div class="row">
		<div class="col-sm">
            <div class="treeview-header">
                @if(string.IsNullOrWhiteSpace(Field.Tooltip))
                {
                    <MudText Typo=Typo.body1 Class="mb-2 pl-4">@Field.Label</MudText>
                }
                else
                {
                    <MudTooltip Text="@Field.Tooltip" Placement="Placement.Top" Arrow="true">
                        <MudText Typo=Typo.body1 Class="mb-2 pl-4">@Field.Label</MudText>
                    </MudTooltip>
                }
            </div>
            <div class="treeview">
                <ul class="@dropClass"
                    ondragover="event.preventDefault();"
                    ondragstart="event.dataTransfer.setData('', event.target.id);"
                    @ondrop="HandleDrop"
                    @ondragenter="HandleDragEnter"
                    @ondragleave="HandleDragLeave">
                    <CascadingValue Value="this">
                        @foreach (var node in nodes)
                        {
                            @RenderTreeNode(node)   
                        }
                    </CascadingValue>
                </ul>
            </div>
		</div>
	</div>
</div>